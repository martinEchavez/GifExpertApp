{"version":3,"sources":["components/AddCategory.js","components/GifGidItems.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGidItems","title","url","className","src","alt","require","config","process","REACT_APP_URL","REACT_APP_LIMIT","REACT_APP_API_KEY","URL","limit","api_key","getGifs","category","a","fetch","encodeURI","res","json","data","gifs","map","gif","id","images","downsized","alert","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","img","key","GifExpertApp","categories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAkCeA,EA/BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACHC,mBAAS,IADN,mBAChCC,EADgC,KACpBC,EADoB,KAgBvC,OACI,0BAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OAMd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAlBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,YCKhBG,EAVK,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAE1B,OACI,yBAAKC,UAAU,0CACX,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAIA,K,uBCPhBK,EAAQ,IAAUC,S,MAE4CC,iPAAtDC,E,EAAAA,cAAeC,E,EAAAA,gBAAiBC,E,EAAAA,kBAClCC,EAAMH,EACNI,EAAQH,EACRI,EAAUH,EAqBDI,EAnBF,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,+EAGUC,MAAM,GAAD,OAAIN,EAAJ,cAAaO,UAAUH,GAAvB,kBAA0CH,EAA1C,oBAA2DC,IAH1E,cAGFM,EAHE,gBAIeA,EAAIC,OAJnB,uBAIAC,EAJA,EAIAA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRzB,MAAOwB,EAAIxB,MACXC,IAAKuB,EAAIE,OAAOC,UAAU1B,QAV1B,kBAaDqB,GAbC,kCAeRM,MAAM,wBAAD,MAfG,0DAAH,sDCoBEC,EAvBC,SAAC,GAAkB,IAAhBd,EAAe,EAAfA,SAAe,ECDN,SAACA,GAAc,IAAD,EAEZ7B,mBAAS,CAC/BmC,KAAM,GACNS,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAiBtC,OAVAC,qBAAU,WACNnB,EAAQC,GACHmB,MAAK,SAAAC,GACFH,EAAS,CACLX,KAAMc,EACNL,SAAS,SAGtB,CAACf,IAEGgB,EDd0BK,CAAarB,GAAjCW,EAFiB,EAEtBL,KAAaS,EAFS,EAETA,QAErB,OACI,oCACI,4BAAKf,GAEJe,GAAW,yCACZ,yBAAK5B,UAAU,aAEPwB,EAAOH,KAAI,SAAAc,GAAG,OACV,kBAAC,EAAD,eACIC,IAAKD,EAAIZ,IACLY,UEMjBE,EApBM,WACjB,IADuB,EAEarD,mBADxB,CAAC,UADU,mBAEhBsD,EAFgB,KAEJvD,EAFI,KAIvB,OACI,kBAAC,WAAD,KACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAECuD,EAAWjB,KAAI,SAAAR,GAAQ,OACpB,kBAAC,EAAD,CACIuB,IAAKvB,EACLA,SAAUA,SCZ9B0B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.8efd81d1.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        // Trim Eliminar espacios en blanco de ambos lados de una cadena\r\n        if(inputValue.trim().length > 1) {\r\n            setCategories(cats => [inputValue, ...cats ])\r\n            setInputValue('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default AddCategory;","import React from 'react'\r\n\r\nconst GifGidItems = ({ title, url }) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGidItems","require('dotenv').config()\r\n\r\nconst { REACT_APP_URL, REACT_APP_LIMIT, REACT_APP_API_KEY } = process.env\r\nconst URL = REACT_APP_URL\r\nconst limit = REACT_APP_LIMIT\r\nconst api_key = REACT_APP_API_KEY\r\n\r\nconst getGifs = async (category) => {\r\n    try {\r\n        // encodeURI Elimina los espacios de la cadena de texto entre otras cosas\r\n        const res = await fetch(`${URL}?q=${encodeURI(category)}&limit=${limit}&api_key=${api_key}`)\r\n        const { data } = await res.json()\r\n\r\n        const gifs = data.map(gif => {\r\n            return {\r\n                id: gif.id,\r\n                title: gif.title,\r\n                url: gif.images.downsized.url,\r\n            }\r\n        })\r\n        return gifs\r\n    } catch (error) {\r\n        alert('Sorry, data not found', error)\r\n    }\r\n}\r\n\r\nexport default getGifs","import React from 'react'\r\nimport GifGidItems from './GifGidItems'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n\r\nconst GifGrid = ({ category }) => {\r\n    // Se renombra data por images\r\n    const { data:images, loading } = useFetchGifs(category)\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            {/**if loading === true */}\r\n            {loading && <p>Loading...</p>}\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map(img => (\r\n                        <GifGidItems\r\n                            key={img.id}\r\n                            {...img} // Se desestructura el objeto antes de ser enviado\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid;","import {useState, useEffect} from 'react'\r\nimport getGifs from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            })\r\n    }, [category])\r\n\r\n    return state\r\n}\r\n","import React, { Fragment, useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n    const arr = ['Shirt'];// Valor por defecto\r\n    const [categories, setCategories] = useState(arr)\r\n\r\n    return (\r\n        <Fragment>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n\r\n            {categories.map(category => (\r\n                <GifGrid\r\n                    key={category}\r\n                    category={category}\r\n                />\r\n            ))}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}